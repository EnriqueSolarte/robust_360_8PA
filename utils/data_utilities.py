from config import Cfg
import os
from dataset_reader.MP3D_VO import MP3D_VO
from dataset_reader.TUM_VI import TUM_VI
import pandas as pd
import numpy as np
from utils.file_utils import create_dir


def get_dataset(cfg: Cfg):
    if cfg.dataset_name == "MP3D_VO":
        dataset_dir = cfg.DIR_MP3D_VO_DATASET
        scene = cfg.scene + "/" + cfg.scene_version
        cfg.dataset = MP3D_VO(dt_dir=dataset_dir, scene=scene)
        return cfg.dataset

    elif cfg.dataset_name == "TUM_VI":
        dataset_dir = cfg.DIR_TUM_VI_DATASET
        scene = "dataset-room{}_{}".format(cfg.scene, cfg.scene_version)
        cfg.dataset = TUM_VI(dt_dir=dataset_dir, scene=scene)
        return cfg.dataset


def get_image_mask(cfg: Cfg):
    """
    returns a mask map given a resolution res=(theta, phi) and location
    loc(theta, phi) for camera orientation
    """
    NotImplementedError
    shape = cfg.dataset_name
    assert len(shape) == 2
    from geometry_utilities import extend_array_to_homogeneous as ext

    h, w = shape
    theta = (-res[0] / 2 + loc[0]), res[0] / 2 + loc[0]
    phi = -res[1] / 2 + loc[1], res[1] / 2 + loc[1]
    # ! (theta, phi) = Kinv * (u, v)
    K = np.linalg.inv(
        np.asarray((2 * np.pi / w, 0, -np.pi, 0, -np.pi / h, np.pi / 2, 0, 0,
                    1)).reshape(3, 3))
    sph_coord = np.radians(np.vstack((theta, phi)))
    uv_coord = K.dot(ext(sph_coord)).astype(int)
    mask = np.zeros((h, w))
    mask[uv_coord[1, 1]:uv_coord[1, 0], uv_coord[0, 0]:uv_coord[0, 1]] = 1
    return (mask * 255).astype(np.uint8)


def save_bearings(*args, **kwargs):

    # In case that the bearing vector were not calculated the whole
    # fucntion is skiped
    if kwargs["bearings_kf"] is not None:
        # ! dataFrame generated by matches bearing vectors
        # [kfx, kfy, kfz, frmx, frmy, frmz] --> (n, 6)
        dt = pd.DataFrame(np.vstack((kwargs["bearings_kf"], kwargs["bearings_frm"])).T)

        if kwargs['cfg'].dataset_name == "MP3D_VO":
            dirname = os.path.join(
                kwargs['cfg'].DIR_ROOT,
                'data',
                kwargs['cfg'].dataset_name,
                kwargs['cfg'].scene,
                str(kwargs['cfg'].scene_version),
                "tracked_bearings"
            )
        else:
            dirname = os.path.join(
                kwargs['cfg'].DIR_ROOT,
                'data',
                kwargs['cfg'].dataset_name,
                'dataset-room{}_{}'.format(kwargs['cfg'].scene, kwargs['cfg'].scene_version),
                "tracked_bearings"
            )

        create_dir(dirname, delete_previous=False)

        kwargs['cfg'].save_config(dirname=dirname)

        file_bearings = str(kwargs["idx_kf"]) + "_" + str(kwargs["idx_frm"]) + ".txt"
        file_bearings = os.path.join(dirname, file_bearings)
        print("dirname:{}".format(dirname))
        print("Frames Kf:{}-frm:{}".format(kwargs["idx_kf"], kwargs["idx_kf"]))
        print("tracked features {}".format(dt.shape[0]))
        print(file_bearings)
        dt.to_csv(file_bearings, header=None, index=None)
