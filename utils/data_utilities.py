from config import Cfg
import os
from dataset_reader.MP3D_VO import MP3D_VO
from dataset_reader.TUM_VI import TUM_VI
import pandas as pd
import numpy as np
from utils.file_utils import create_dir
from utils.file_utils import create_file, write_file
import csv

def get_dataset(cfg: Cfg):
    if cfg.prmt.dataset_name == "MP3D_VO":
        dataset_dir = cfg.DIR_MP3D_VO_DATASET
        scene = "{}/{}".format(cfg.prmt.scene, cfg.prmt.scene_version)
        cfg.dataset = MP3D_VO(dt_dir=dataset_dir, scene=scene)
        return cfg.dataset

    elif cfg.prmt.dataset_name == "TUM_VI":
        dataset_dir = cfg.DIR_TUM_VI_DATASET
        scene = "dataset-room{}_{}".format(cfg.prmt.scene, cfg.prmt.scene_version)
        cfg.dataset = TUM_VI(dt_dir=dataset_dir, scene=scene)
        return cfg.dataset

def save_bearings(*args, **kwargs):

    # > In case that the bearing vector were not calculated the whole
    # > fucntion is skiped
    if kwargs["bearings_kf"] is not None:
        # ! dataFrame generated by matches bearing vectors
        # [kfx, kfy, kfz, frmx, frmy, frmz] --> (n, 6)
        dt = pd.DataFrame(np.vstack((kwargs["bearings_kf"], kwargs["bearings_frm"])).T)

        if kwargs['cfg'].prmt.dataset_name == "MP3D_VO":
            dirname = os.path.join(
                kwargs['cfg'].DIR_ROOT,
                'data',
                kwargs['cfg'].prmt.dataset_name,
                kwargs['cfg'].prmt.scene,
                str(kwargs['cfg'].prmt.scene_version),
                kwargs['cfg'].tracked_or_sampled
            )
        else:
            dirname = os.path.join(
                kwargs['cfg'].DIR_ROOT,
                'data',
                kwargs['cfg'].prmt.dataset_name,
                'dataset-room{}_{}'.format(kwargs['cfg'].prmt.scene, kwargs['cfg'].prmt.scene_version),
                kwargs['cfg'].tracked_or_sampled
            )

        # * DELETE PREVIOUS DATA INFO ONLY ONCE
        try: 
            if kwargs["cfg"].newDataFlag:
                create_dir(dirname, delete_previous=False)
        except:
            kwargs["cfg"].newDataFlag = True
            create_dir(dirname, delete_previous=True)
    
        file_bearings = "bearings_" + str(kwargs["idx_kf"]) + "_" + str(kwargs["idx_frm"]) + ".txt"
        file_bearings = os.path.join(dirname, file_bearings)
        print("-")
        print("Saved filename:{}".format(file_bearings))
        print("Frames ref: Kf:{}   -   frm:{}".format(kwargs["idx_kf"], kwargs["idx_kf"]))
        print("Number of {}: {}".format(kwargs['cfg'].tracked_or_sampled, dt.shape[0]))
        dt.to_csv(file_bearings, header=None, index=None)

        if kwargs['save_config']:
            kwargs['cfg'].save_config(dirname=dirname)

        camera_pose_filename = kwargs.get("save_camera_as", None)
        if camera_pose_filename is not None:
            pose_file = os.path.join(dirname, camera_pose_filename)
            flatten_pose = kwargs["relative_pose"].flatten()
            write_file(pose_file, tuple(flatten_pose))


